var SearchFiles = ["GUID-0FE369B7-375D-42F0-8D67-D9C7A969446F.html",
							"GUID-E6E00EA3-D4B8-4D63-B2E1-5A828AF8B02B.html",
							"GUID-A0F66FE7-EA1B-4B61-9461-94959D430725.html",
							"GUID-0E61B769-C9D2-4263-9241-E920B25B5942.html",
							"GUID-3A0F79CC-21A9-4AA4-9784-D4E205639D98.html",
							"GUID-60FE74B7-3F9C-429D-BBB6-D8DD7A0CFD84.html",
							"GUID-99D30EC0-EEB4-4E4B-B241-7B486A7FF621.html",
							"GUID-A3B89BE3-4E24-4B98-B35C-691436D071DA.html",
							"GUID-77C55A1B-0D29-4366-93A1-E69564C3DFA2.html"];

var SearchTitles = ["Harmony 3 Aerospace Applications for SAM RH71 Family",
"ICM with ECC error injection Application Example",
"IP1553 Bus Controller operation blocking Example",
"IP1553 Bus Controller operation interrupt Example",
"IP1553 Remote Terminal operation blocking Example",
"IP1553 Remote Terminal operation interrupt Example",
"SpaceWire Escape Character and Time Code Handler Loopback Example",
"SpaceWire Loopback Example",
"SpaceWire RMAP Loopback Example"];

var SearchInfo = [" Harmony 3 Aerospace Applications for SAM RH71 Family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC microcontroller and microprocessor devices Refer to the following links for more information This repository contains the MPLAB® Harmony 3 Aerospace Application examples for SAM RH71 Family It provides usage example of the IP1553 SpaceWire ICM and ECC peripherals in the SAMRH71 Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries Name Description icm_with_ecc_error_injection ICM with ECC errors injections ip1553_bc_operation_blocking IP1553 Bus Controller operation blocking ip1553_bc_operation_interrupt IP1553 Bus Controller operation interrupt ip1553_rt_operation_blocking IP1553 Remote Terminal operation blocking ip1553_rt_operation_interrupt IP1553 Remote Terminal operation interrupt spw_loopback SpaceWire Loopback spw_rmap_loopback SpaceWire RMAP Loopback spw_escChar_tch_loopback SpaceWire Escape Character and Time Code Handler Loopback ",
							" ICM with ECC error injection Application Example This example shows how to configure the ICM and the different ECC controllers to handle and to correct the ECC errors This example use the ECC test mode to inject ECC errors in the memories monitored by the ICM Building The Application The parent folder for all the MPLABX IDE projects for this application is given below: Application Path : apps icm_with_ecc_error_injection firmware To build the application refer to the table below and open the appropriate project file in MPLABX IDE Project Name Description sam_rh71_ek X SAM RH71 Evaluation Kit board MPLAB Harmony Configurations Refer to the MHC project graph for the components used and the respective configuration options Hardware Setup Project sam_rh71_ek X Hardware Used SAM RH71 Evaluation Kit Hardware Setup Connect the debugger probe to J33 Connect the USB port on the board to the computer using a mini USB cable Running The Application Open the Terminal application (Ex :Tera term) on the computer Connect to the Virtual COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application using the MPLABX IDE See the following message in the console ----------------------------------------------------------- ICM with ECC error injection example ----------------------------------------------------------- Enable ICM region(0-3) ICM monitoring started for region (0-3) Press [Push Button 0] to change ecc error injection memory target(ITCM DTCM FlexRAM external SDRAM) Press [Push Button 1] to inject fixable ecc error Press [Push Button 2] to inject unfixable ecc error Current ECC error injection is selected for memory : ITCM By pressing the button you can change the memory area where ECC error are injected When an error is injected it display the interrupts that occurs and the ICM region mismatch if any For example an error injection in ITCM: - Generate fixable error on region ITCM at index : 0 1 new FIX interrupt on region ITCM ",
							" IP1553 Bus Controller operation blocking Example This example shows how to start the IP1553 module in Bus Controller mode and issue data transfer commands in a blocking manner The CPU polls the peripheral register continuously to manage the transfer It performs BC to RT01 data transfer RT01 to BC data transfer and BC to RTs broadcast data transfer Mode command can also be sent to RT01 address or in boardcast mode Building The Application The parent folder for all the MPLABX IDE projects for this application is given below: Application Path : apps ip1553 ip1553_bc_operation_blocking firmware To build the application refer to the table below and open the appropriate project file in MPLABX IDE Project Name Description sam_rh71_ek X SAM RH71 Evaluation Kit board MPLAB Harmony Configurations Refer to the MHC project graph for the components used and the respective configuration options Hardware Setup Project sam_rh71_ek X Hardware Used SAM RH71 Evaluation Kit MIL1553 Exerciser and Cables Hardware Setup Connect the debugger probe to J33 Connect the USB port on the board to the computer using a mini USB cable Connect the MIL1553 exerciser on 1553_BUSA or 1553_BUSB connectors Exerciser configuration Configure RT01 to reply to data transfer command form BC to RT01 buffer 1 of 1 word Configure RT01 to reply to data transfer command form RT01 buffer 3 to BC buffer 1 of 3 words Configure RT01 to reply to broadcast data transfer command form BC to RTs buffer 3 of 32 words Configure RT01 to receive any type of mode command Running The Application Open the Terminal application (Ex :Tera term) on the computer Connect to the Virtual COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application using the MPLABX IDE See the following message in the console ----------------------------------------------------------- IP1553 - BC mode blocking operation example ----------------------------------------------------------- Press '1' to send one data from TX buffer 0 to RT1 on Bus A Press '2' to receive one data in buffer 3 from RT1 on bus A Press '3' to broadcast for RTs from buffer 1 on bus A Press '4' to initiate mode command transfer to RT1 on bus A Press '5' to initiate broadcast mode command transfer on bus A Type one of the menu characters in the terminal It will echo back the chosen option and the result of the 1553 BC command (status word and received data if applicable) ",
							" IP1553 Bus Controller operation interrupt Example This example shows how to start the IP1553 module in Bus Controller mode and issue data transfer commands in a non-blocking manner The peripheral interrupt is used to manage the transfer It performs BC to RT01 data transfer RT01 to BC data transfer and BC to RTs broadcast data transfer Mode command can also be sent to RT01 address or in broadcast mode Building The Application The parent folder for all the MPLABX IDE projects for this application is given below: Application Path : apps ip1553 ip1553_bc_operation_interrupt firmware To build the application refer to the table below and open the appropriate project file in MPLABX IDE Project Name Description sam_rh71_ek X SAM RH71 Evaluation Kit board MPLAB Harmony Configurations Refer to the MHC project graph for the components used and the respective configuration options Hardware Setup Project sam_rh71_ek X Hardware Used SAM RH71 Evaluation Kit MIL1553 Exerciser and Cables Hardware Setup Connect the debugger probe to J33 Connect the USB port on the board to the computer using a mini USB cable Connect the MIL1553 exerciser on 1553_BUSA or 1553_BUSB connectors Exerciser configuration Configure RT01 to reply to data transfer command form BC to RT01 buffer 1 of 1 word Configure RT01 to reply to data transfer command form RT01 buffer 3 to BC buffer 1 of 3 words Configure RT01 to reply to broadcast data transfer command form BC to RTs buffer 3 of 32 words Configure RT01 to receive any type of mode command Running The Application Open the Terminal application (Ex :Tera term) on the computer Connect to the Virtual COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application using the MPLABX IDE See the following message in the console ----------------------------------------------------------- IP1553 - BC mode interrupt operation example ----------------------------------------------------------- Press '1' to send one data from TX buffer 0 to RT1 on Bus A Press '2' to receive one data in buffer 3 from RT1 on bus A Press '3' to broadcast for RTs from buffer 1 on bus A Press '4' to initiate mode command transfer to RT1 on bus A Press '5' to initiate broadcast mode command transfer on bus A Type one of the menu characters in the terminal It will echo back the chosen option and the result of the 1553 BC command (status word and received data if applicable) ",
							" IP1553 Remote Terminal operation blocking Example This example shows how to start the IP1553 module in Remote Terminal mode with RT01 address and receive data transfer commands in a blocking manner The CPU polls the peripheral register continuously to manage the transfer It waits for any incoming commands and display the buffer sent or the received data The push buttons can be used to modify the RT configuration on answers to mode commands Building The Application The parent folder for all the MPLABX IDE projects for this application is given below: Application Path : apps ip1553 ip1553_rt_operation_blocking firmware To build the application refer to the table below and open the appropriate project file in MPLABX IDE Project Name Description sam_rh71_ek X SAM RH71 Evaluation Kit board MPLAB Harmony Configurations Refer to the MHC project graph for the components used and the respective configuration options Hardware Setup Project sam_rh71_ek X Hardware Used SAM RH71 Evaluation Kit MIL1553 Exerciser and Cables Hardware Setup Connect the debugger probe to J33 Connect the USB port on the board to the computer using a mini USB cable Connect the MIL1553 exerciser on 1553_BUSA or 1553_BUSB connectors Exerciser configuration Configure in Bus commander to send commands to RT01 Running The Application Open the Terminal application (Ex :Tera term) on the computer Connect to the Virtual COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application using the MPLABX IDE See the following message in the console ----------------------------------------------------------- IP1553 - RT mode blocking operation example ----------------------------------------------------------- - Set config : BCE=0 SREQ=0 Busy=0 SubSystem=0 TR=0 - Set vector word = 0xABCD and BIT word = 0xFEED MIL1553 RT mode wait for BC command With MIL1553 exerciser send data transfer command to or from RT01 It will echo the buffer sent or the received data With MIL1553 exerciser send mode command to RT01 It will print information of received mode command on RT With the push buttons modify the RT configuration and send new mode command With push button PB0 each press will activate 1 bit in configuration register: - Set config : BCE=1 SREQ=0 Busy=0 SubSystem=0 TR=0 - Set config : BCE=0 SREQ=1 Busy=0 SubSystem=0 TR=0 - Set config : BCE=0 SREQ=0 Busy=1 SubSystem=0 TR=0 - Set config : BCE=0 SREQ=0 Busy=0 SubSystem=1 TR=0 - Set config : BCE=0 SREQ=0 Busy=0 SubSystem=0 TR=1 - Set config : BCE=0 SREQ=0 Busy=0 SubSystem=0 TR=0 With push button PB1 each press will switch the values of bit word and vector word: - Set vector word = 0x1234 and BIT word = 0xCAFE - Set vector word = 0xABCD and BIT word = 0xFEED ",
							" IP1553 Remote Terminal operation interrupt Example This example shows how to start the IP1553 module in Remote Terminal mode with RT01 address and receive data transfer commands in a non-blocking manner The peripheral interrupt is used to manage the transfer It waits for any incoming commands and display the buffer sent or the received data It will print indications when mode command is received by the RT The push buttons can be used to modify the RT configuration on answers to mode commands Building The Application The parent folder for all the MPLABX IDE projects for this application is given below: Application Path : apps ip1553 ip1553_rt_operation_interrupt firmware To build the application refer to the table below and open the appropriate project file in MPLABX IDE Project Name Description sam_rh71_ek X SAM RH71 Evaluation Kit board MPLAB Harmony Configurations Refer to the MHC project graph for the components used and the respective configuration options Hardware Setup Project sam_rh71_ek X Hardware Used SAM RH71 Evaluation Kit MIL1553 Exerciser and Cables Hardware Setup Connect the debugger probe to J33 Connect the USB port on the board to the computer using a mini USB cable Connect the MIL1553 exerciser on 1553_BUSA or 1553_BUSB connectors Exerciser configuration Configure in Bus commander to send data and mode commands to RT01 Running The Application Open the Terminal application (Ex :Tera term) on the computer Connect to the Virtual COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application using the MPLABX IDE See the following message in the console ----------------------------------------------------------- IP1553 - RT mode interrupt operation example ----------------------------------------------------------- - Set config : BCE=0 SREQ=0 Busy=0 SubSystem=0 TR=0 - Set vector word = 0xABCD and BIT word = 0xFEED MIL1553 RT mode wait for BC command With MIL1553 exerciser send data transfer command to or from RT01 It will echo the buffer sent or the received data With MIL1553 exerciser send mode command to RT01 It will print information of received mode command on RT With the push buttons modify the RT configuration and send new mode command With push button PB0 each press will activate 1 bit in configuration register: - Set config : BCE=1 SREQ=0 Busy=0 SubSystem=0 TR=0 - Set config : BCE=0 SREQ=1 Busy=0 SubSystem=0 TR=0 - Set config : BCE=0 SREQ=0 Busy=1 SubSystem=0 TR=0 - Set config : BCE=0 SREQ=0 Busy=0 SubSystem=1 TR=0 - Set config : BCE=0 SREQ=0 Busy=0 SubSystem=0 TR=1 - Set config : BCE=0 SREQ=0 Busy=0 SubSystem=0 TR=0 With push button PB1 each press will switch the values of bit word and vector word: - Set vector word = 0x1234 and BIT word = 0xCAFE - Set vector word = 0xABCD and BIT word = 0xFEED ",
							" SpaceWire Escape Character and Time Code Handler Loopback Example This example shows how to configure the SpaceWire peripheral to handle escape character It shows several ways to do so: With Link interfaces: Send escape character Generate matching interrupt event on incoming escape character Generate distributed interrupt or distributed interrupt acknowledge event on corresponding incoming escape character With Time Code Handlers: Distribute Time Code periodically using internal events Generate interrupts on matching incoming time code Building The Application The parent folder for all the MPLABX IDE projects for this application is given below: Application Path : apps spw spw_escChar_tch_loopback firmware To build the application refer to the table below and open the appropriate project file in MPLABX IDE Project Name Description sam_rh71_ek X SAM RH71 Evaluation Kit board MPLAB Harmony Configurations Refer to the MHC project graph for the components used and the respective configuration options Hardware Setup Project sam_rh71_ek X Hardware Used SAM RH71 Evaluation Kit SpaceWire cable Hardware Setup Connect the debugger probe to J33 Connect the USB port on the board to the computer using a mini USB cable Connect the two SpaceWire link on the board to each other using a SpaceWire cable Running The Application Open the Terminal application (Ex :Tera term) on the computer Connect to the Virtual COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application using the MPLABX IDE See the following message in the console ----------------------------------------------------------- SPW EscChar and Time Code Handler loopback example ----------------------------------------------------------- Wait for both SWP link switch to run state SPW Link in Run state Set link 2 escape character match event 1 for time code 0x22 Transmit escape character (time code 0x22) on link 1 - Link 2 Esc Event 1 : 0x22 Configure TCH to send Time Code on Link 1 Configure Time Code event to count time code '0x10' occurrences Prepare send of distributed interrupt '4' with send list that start on matching time code 0x04 Manually send time code '0x04' now to trigger TX send - TC=0x04 - Reload next PKTTX - Link2 DI=0x00000010 Configure TCH to send Time code using RTCOUT0 event and restart every second - TC=0x05 - TC=0x01 - TC=0x02 - TC=0x03 - TC=0x04 - Reload next PKTTX - Link2 DI=0x00000010 - TC=0x05 - TC=0x06 - TC=0x07 - TC=0x08 - TC=0x09 - TC=0x0A - TC=0x0B - TC=0x0C - TC=0x0D - TC=0x0E - TC=0x0F - TC=0x10 - TC event - TC=0x11 - TC=0x12 - TC=0x13 - TC=0x14 - TC=0x15 - TC=0x16 - TC=0x17 - TC=0x18 - TC=0x19 - TC=0x1A - TC=0x1B - TC=0x1C - TC=0x1D - TC=0x1E - TC=0x1F - TC=0x20 - TC=0x01 - TC=0x02 - TC=0x03 - TC=0x04 - Reload next PKTTX - Link2 DI=0x00000010 - TC=0x05 - TC=0x06 - TC=0x07 - TC=0x08 - TC=0x09 - TC=0x0A - TC=0x0B - TC=0x0C - TC=0x0D - TC=0x0E - TC=0x0F - TC=0x10 - TC event Stop TCH event and restart ",
							" SpaceWire Loopback Example This example shows how to configure the SpaceWire peripheral to send and receive multiple packets It uses multiple receive buffer to exercise in an optimize way the 3 states (NEXT CURRENT PREVIOUS) for packet reception Building The Application The parent folder for all the MPLABX IDE projects for this application is given below: Application Path : apps spw spw_loopback firmware To build the application refer to the table below and open the appropriate project file in MPLABX IDE Project Name Description sam_rh71_ek X SAM RH71 Evaluation Kit board MPLAB Harmony Configurations Refer to the MHC project graph for the components used and the respective configuration options Hardware Setup Project sam_rh71_ek X Hardware Used SAM RH71 Evaluation Kit SpaceWire cable Hardware Setup Connect the debugger probe to J33 Connect the USB port on the board to the computer using a mini USB cable Connect the two SpaceWire link on the board to each other using a SpaceWire cable Running The Application Open the Terminal application (Ex :Tera term) on the computer Connect to the Virtual COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application using the MPLABX IDE See the following message in the console ----------------------------------------------------------- SPW loopback example ----------------------------------------------------------- Wait for both SWP link switch to run state SPW Link in Run state TX time=2284450 us for 25000000 bytes Effective rate=87 Mb/s Average RX process time = 148 us Rx sequence errors = 0 End of transfer ",
							" SpaceWire RMAP Loopback Example This example shows how to configure the SpaceWire peripheral to configure the RMAP module send an RMAP command with the packet transceiver and receive the RMAP reply with the packet receiver Building The Application The parent folder for all the MPLABX IDE projects for this application is given below: Application Path : aerospace apps spw spw_rmap_loopback firmware To build the application refer to the table below and open the appropriate project file in MPLABX IDE Project Name Description sam_rh71_ek X SAM RH71 Evaluation Kit board MPLAB Harmony Configurations Refer to the MHC project graph for the components used and the respective configuration options Hardware Setup Project sam_rh71_ek X Hardware Used SAM RH71 Evaluation Kit SpaceWire cable Hardware Setup Connect the debugger probe to J33 Connect the USB port on the board to the computer using a mini USB cable Connect the two SpaceWire link on the board to each other using a SpaceWire cable Running The Application Open the Terminal application (Ex :Tera term) on the computer Connect to the Virtual COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application using the MPLABX IDE See the following message in the console ----------------------------------------------------------- SPW RMAP loopback example ----------------------------------------------------------- Wait for both SWP link switch to run state SPW Link in Run state Initialize packet receiver to receive 1 packet(s) of 8 bytes Send SWP packet with RMAP command write with reply Wait RMAP reply Receive RMAP WRITE reply : ID = 0xabcd with status : 0x0 RMAP write command reply with status OK Initialize packet receiver to receive 1 packet(s) of 80 bytes Send SWP packet with RMAP command read Wait RMAP reply Receive RMAP READ reply : ID = 0xabcd with status : 0x0 Receive 64 bytes of data : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F RMAP read command reply with status OK "];

